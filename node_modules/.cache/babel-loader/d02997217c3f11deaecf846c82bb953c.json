{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n  const zipcodeFilters = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state;\n    return api;\n  };\n\n  const zipcodeFiltersString = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value;\n    return api;\n  };\n\n  return {\n    filter: {\n      activty: 0,\n      type: 0,\n      coach: 0,\n      recluter: 0,\n      candidate: 0,\n      functional: 0,\n      specilty: 0,\n      industry: 0,\n      state: \"\",\n      zip: \"\"\n    },\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState: {\n      value: \"\",\n      options: []\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: []\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n    },\n    getZipCodeInit: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({\n        zipCodeInit,\n        isLoading: false\n      });\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    },\n    getMapFilters: async filter => {\n      setState({\n        isLoading: true\n      });\n      console.log(filter);\n\n      if (filter.state != \"\") {\n        const resultGeneric = await fetch(zipcodeFilters(filter));\n        const zipCode = await resultGeneric.json();\n        setState({\n          zipCode,\n          isLoading: false\n        });\n      }\n\n      const data = {\n        filter\n      };\n\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        const gpacMapObject = await rawResponse.json();\n        console.log(gpacMapObject);\n        setState({ ...gpacMapObject,\n          isLoading: false\n        });\n      })();\n    },\n    setViewPort: async viewport => {\n      setState({\n        viewport: viewport\n      });\n    },\n    SaveGpac: async GuardaGpac => {\n      const data = {\n        GuardaGpac\n      };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    },\n    getZipcode: async (state, FiltersMap) => {\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray = await resultGeneric.json();\n      const data = zipCodeArray.records.map(recorod => {\n        let rObj = {\n          coodi: recorod.fields.geopoint,\n          nombre: recorod.fields.zip,\n          value: recorod.fields.zip\n        };\n        return rObj;\n      });\n      const zipState = {\n        value: state,\n        options: data\n      };\n      const filter = FiltersMap;\n      filter.state = state;\n      setState({\n        zipState,\n        isLoading: false,\n        filter\n      });\n      console.log(\"zustand\" + filter);\n    },\n    setZIP: async (filter, zip) => {}\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","zipcodeFilters","value","api","state","zipcodeFiltersString","filter","activty","type","coach","recluter","candidate","functional","specilty","industry","zip","viewport","latitude","longitude","width","height","zoom","zipState","options","searchMap","undefined","activity","getActivitySel","generic","recluiter","stated","gpacMapObject","zipCode","records","facet_groups","zipCodeInit","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","getZipCodeInit","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated","getMapFilters","console","log","data","rawResponse","method","headers","body","JSON","stringify","setViewPort","SaveGpac","GuardaGpac","option","dataInfo","getZipcode","FiltersMap","zipCodeArray","map","recorod","rObj","coodi","fields","geopoint","nombre","setZIP"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState, FiltersMap, viewport,GuardaGpac, zipState } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n\n  const zipcodeFilters = (value: FiltersMap) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state\n    return api;\n  };\n  const zipcodeFiltersString = (value: string) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value\n    return api;\n  };\n  return {\n    filter:{\n      activty:0,\n      type:0,\n      coach:0,\n      recluter:0,\n      candidate:0,\n      functional:0,\n      specilty:0,\n      industry:0,\n      state:\"\",\n      zip:\"\"\n    },\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState:{\n      value:\"\",\n      options:[],\n      \n      \n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n \n    },\n    getZipCodeInit: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({ zipCodeInit, isLoading: false });\n     \n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    }, getMapFilters: async (filter: FiltersMap) => {\n      setState({ isLoading: true });\n console.log(filter);\n      if(filter.state!=\"\" ){\n\n  \n      const resultGeneric = await fetch(zipcodeFilters(filter));\n      const zipCode = await resultGeneric.json();\n      setState({ zipCode, isLoading: false });\n    }\n   \n      const data = { filter };\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        \n       \n       const  gpacMapObject = await rawResponse.json();\n\n       console.log(gpacMapObject)\n      setState({ ...gpacMapObject, isLoading: false });\n      })();\n\n    }, setViewPort:async(viewport: viewport) => {\n      setState({\n        viewport: viewport\n      })\n    }, SaveGpac:async (GuardaGpac: GuardaGpac) => {\n      const data = { GuardaGpac };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    }, getZipcode:async (state: any,FiltersMap: FiltersMap) => {\n\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray= await resultGeneric.json();\n    \n      const data = zipCodeArray.records.map((recorod: { fields: { geopoint: any; zip: any; }; }) => {\n\n        let rObj = {\n          coodi:recorod.fields.geopoint,\n          nombre:recorod.fields.zip,\n          value:recorod.fields.zip\n           \n        }\n        return rObj\n      });\n      \n      const zipState={value:state,options:data};\n      const filter=FiltersMap;\n      filter.state=state;\n        setState({zipState, isLoading: false,filter });\n\n        console.log(\"zustand\"+ filter);\n    }, setZIP:async(filter: FiltersMap,zip: any) => {\n         \n\n       \n    }\n\n\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}