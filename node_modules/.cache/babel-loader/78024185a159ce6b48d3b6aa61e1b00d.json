{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n  const zipcodeFilters = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state;\n    return api;\n  };\n\n  return {\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: []\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n    },\n    getZipCodeInit: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({\n        zipCodeInit,\n        isLoading: false\n      });\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    },\n    getMapFilters: async filter => {\n      setState({\n        isLoading: true\n      });\n\n      if (filter.state != \"\" && filter.zip != \"\") {\n        const resultGeneric = await fetch(zipcodeFilters(filter));\n        const zipCode = await resultGeneric.json();\n        setState({\n          zipCode,\n          isLoading: false\n        });\n      }\n\n      const data = {\n        filter\n      };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      fetch(server + \"filtros\", option).then(function (res) {\n        console.log(res);\n      }).catch(function (res) {\n        console.log(res);\n      });\n    },\n    setViewPort: viewport => {\n      setState({\n        viewport: viewport\n      });\n    },\n    SaveGpac: GuardaGpac => {\n      const data = {\n        GuardaGpac\n      };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    }\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","zipcodeFilters","value","api","state","viewport","latitude","longitude","width","height","zoom","searchMap","undefined","activity","getActivitySel","generic","type","specilty","functional","candidate","coach","recluiter","stated","gpacMapObject","zipCode","records","facet_groups","zipCodeInit","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","getZipCodeInit","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated","getMapFilters","filter","zip","data","option","method","headers","body","JSON","stringify","then","res","console","log","catch","setViewPort","SaveGpac","GuardaGpac","dataInfo"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState, FiltersMap, viewport,GuardaGpac } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n\n  const zipcodeFilters = (value: FiltersMap) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state\n    return api;\n  };\n  return {\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n \n    },\n    getZipCodeInit: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({ zipCodeInit, isLoading: false });\n     \n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    }, getMapFilters: async (filter: FiltersMap) => {\n      setState({ isLoading: true });\n \n      if(filter.state!=\"\" && filter.zip!=\"\"){\n\n  \n      const resultGeneric = await fetch(zipcodeFilters(filter));\n      const zipCode = await resultGeneric.json();\n      setState({ zipCode, isLoading: false });\n    }\n   \n      const data = { filter };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n\n        fetch(server + \"filtros\", option).\n        then(function(res){ console.log(res) })\n        .catch(function(res){ console.log(res) })\n       \n      \n\n    }, setViewPort: (viewport: viewport) => {\n      setState({\n        viewport: viewport\n      })\n    }, SaveGpac: (GuardaGpac: GuardaGpac) => {\n      const data = { GuardaGpac };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    }\n\n\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}