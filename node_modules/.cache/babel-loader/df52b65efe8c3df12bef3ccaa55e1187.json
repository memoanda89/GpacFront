{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&facet=state\";\n\n  const zipcodeFilters = value => {\n    return \"\";\n  };\n\n  return {\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 800,\n      zoom: 2\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n      console.log(zipCode);\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    },\n    getMapFilters: async filter => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    },\n    cambiaMapa: () => {\n      setState({\n        viewport: {\n          latitude: 40.5360,\n          longitude: -94.7522,\n          width: 1030,\n          height: 800,\n          zoom: 8\n        }\n      });\n    } // ,\n    // setActivity:(seleccionado:number)=>{\n    //   const searchMap.activity=number;\n    //  setState({searchMap.activity:seleccionado})\n    // }\n\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","zipcodeFilters","value","viewport","latitude","longitude","width","height","zoom","searchMap","undefined","activity","getActivitySel","generic","type","specilty","functional","candidate","coach","recluiter","stated","gpacMapObject","zipCode","records","facet_groups","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","console","log","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated","getMapFilters","filter","cambiaMapa"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState, FiltersMap } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&facet=state\";\n  \n\n  const zipcodeFilters = (value:FiltersMap) => {\n\n   return \"\";\n};\n  return {\n    viewport:{\n      latitude: 40.5360,\n      longitude:-94.7522 ,\n      width:1030,\n      height:800,\n      zoom: 2\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel:0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups:[\n         \n      ]\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n      console.log(zipCode);\n\n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    }, getMapFilters: async (filter:FiltersMap) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog );\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    },cambiaMapa:()=>{\n      setState({\n        viewport:{\n          latitude: 40.5360,\n          longitude:-94.7522 ,\n          width:1030,\n          height:800,\n          zoom: 8\n        }\n      }\n        \n      )\n    }\n    // ,\n    // setActivity:(seleccionado:number)=>{\n    //   const searchMap.activity=number;\n     \n    //  setState({searchMap.activity:seleccionado})\n     \n    // }\n\n  }\n})"]},"metadata":{},"sourceType":"module"}