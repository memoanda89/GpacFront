{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n  const zipcodeFilters = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state;\n    return api;\n  };\n\n  const zipcodeFiltersString = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value;\n    return api;\n  };\n\n  return {\n    filter: {\n      name: \"\",\n      activty: 0,\n      type: 0,\n      coach: 0,\n      recluter: 0,\n      candidate: 0,\n      functional: 0,\n      specilty: 0,\n      industry: 0,\n      state: \"\",\n      zip: \"\"\n    },\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState: {\n      value: \"\",\n      options: []\n    },\n    guardaGpac: {\n      name: \"\",\n      state: \"\",\n      specilty: 0,\n      functional: 0,\n      activty: 0,\n      candidate: 0,\n      coach: 0,\n      industry: 0,\n      recluter: 0,\n      type: 0,\n      zip: \"\",\n      latitud: 0,\n      longitud: 0\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: []\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n    },\n    getZipCodeInit: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({\n        zipCodeInit,\n        isLoading: false\n      });\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    },\n    getMapFilters: async filter => {\n      setState({\n        isLoading: true\n      });\n\n      if (filter.state != \"\") {\n        const resultGeneric = await fetch(zipcodeFilters(filter));\n        const zipCode = await resultGeneric.json();\n        setState({\n          zipCode,\n          isLoading: false\n        });\n      }\n\n      const data = {\n        filter\n      };\n\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        const gpacMapObject = await rawResponse.json();\n        setState({\n          gpacMapObject,\n          isLoading: false\n        });\n      })();\n    },\n    setViewPort: async viewport => {\n      setState({\n        viewport: viewport\n      });\n    },\n    SaveGpac: async GuardaGpac => {\n      const data = {\n        GuardaGpac\n      };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    },\n    getZipcode: async (state, FiltersMap) => {\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray = await resultGeneric.json();\n      const data = zipCodeArray.records.map(recorod => {\n        let rObj = {\n          coordi: recorod.fields.geopoint,\n          nombre: recorod.fields.zip,\n          value: recorod.fields.zip\n        };\n        return rObj;\n      });\n      const zipState = {\n        value: state,\n        options: data\n      };\n      const filter = FiltersMap;\n      filter.state = state;\n      setState({\n        zipState,\n        isLoading: false,\n        filter\n      });\n      console.log(filter);\n    },\n    setZIP: async (filter, zip) => {\n      filter.zip = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setName: async (filter, zip) => {\n      filter.name = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setType: async (filter, type) => {\n      filter.type = type;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setSpecilty: async (filter, specilty) => {\n      filter.specilty = specilty;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setRecluter: async (filter, zip) => {\n      filter.recluter = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setIndustry: async (filter, zip) => {\n      filter.industry = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setFunctional: async (filter, zip) => {\n      filter.functional = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setCoach: async (filter, zip) => {\n      filter.coach = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setCandidate: async (filter, zip) => {\n      filter.candidate = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setActivity: async (filter, zip) => {\n      filter.activty = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setNameGuardar: async (name, Gpac) => {\n      const guardaGpac = Gpac;\n      guardaGpac.name = name;\n      setState({\n        isLoading: false,\n        guardaGpac\n      });\n    },\n    getZipcodeGuarda: async (state, Gpac) => {\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray = await resultGeneric.json();\n      const data = zipCodeArray.records.map(recorod => {\n        let rObj = {\n          coordi: recorod.fields.geopoint,\n          nombre: recorod.fields.zip,\n          value: recorod.fields.zip\n        };\n        return rObj;\n      });\n      const zipState = {\n        value: state,\n        options: data\n      };\n      Gpac.state = state;\n      const guardaGpac = Gpac;\n      setState({\n        zipState,\n        isLoading: false,\n        guardaGpac\n      });\n    },\n    setInfoGuardar: async (zip, latitud, longitud, Gpac) => {\n      const guardaGpac = Gpac;\n      guardaGpac.zip = zip;\n      guardaGpac.latitud = latitud;\n      guardaGpac.longitud = longitud;\n      console.log(guardaGpac);\n      setState({\n        isLoading: false,\n        guardaGpac\n      });\n    },\n    setstateGuardar: async (name, Gpac) => {\n      const guardaGpac = Gpac;\n      guardaGpac.state = name;\n      setState({\n        isLoading: false,\n        guardaGpac\n      });\n    },\n    setTypeSave: async (filter, type) => {\n      filter.type = type;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setSpeciltySave: async (filter, specilty) => {\n      filter.specilty = specilty;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setRecluterSave: async (filter, zip) => {\n      filter.recluter = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setIndustrySave: async (filter, zip) => {\n      filter.industry = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setFunctionalSave: async (filter, zip) => {\n      filter.functional = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setCoachSave: async (filter, zip) => {\n      filter.coach = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setCandidateSave: async (filter, zip) => {\n      filter.candidate = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    },\n    setActivitySave: async (filter, zip) => {\n      filter.activty = zip;\n      setState({\n        isLoading: false,\n        filter\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/GpacFront/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","zipcodeFilters","value","api","state","zipcodeFiltersString","filter","name","activty","type","coach","recluter","candidate","functional","specilty","industry","zip","viewport","latitude","longitude","width","height","zoom","zipState","options","guardaGpac","latitud","longitud","searchMap","undefined","activity","getActivitySel","generic","recluiter","stated","gpacMapObject","zipCode","records","facet_groups","zipCodeInit","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","getZipCodeInit","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated","getMapFilters","data","rawResponse","method","headers","body","JSON","stringify","setViewPort","SaveGpac","GuardaGpac","option","dataInfo","getZipcode","FiltersMap","zipCodeArray","map","recorod","rObj","coordi","fields","geopoint","nombre","console","log","setZIP","setName","setType","setSpecilty","setRecluter","setIndustry","setFunctional","setCoach","setCandidate","setActivity","setNameGuardar","Gpac","getZipcodeGuarda","setInfoGuardar","setstateGuardar","setTypeSave","setSpeciltySave","setRecluterSave","setIndustrySave","setFunctionalSave","setCoachSave","setCandidateSave","setActivitySave"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState, FiltersMap, viewport,GuardaGpac, zipState } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n\n  const zipcodeFilters = (value: FiltersMap) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state\n    return api;\n  };\n  const zipcodeFiltersString = (value: string) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value\n    return api;\n  };\n  return {\n    filter:{\n      name:\"\",\n      activty:0,\n      type:0,\n      coach:0,\n      recluter:0,\n      candidate:0,\n      functional:0,\n      specilty:0,\n      industry:0,\n      state:\"\",\n      zip:\"\"\n    },\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState:{\n      value:\"\",\n      options:[],\n      \n      \n    },\n    guardaGpac:{\n      name:\"\",\n      state:\"\",\n      specilty:0,\n      functional:0,\n      activty:0,\n      candidate:0,\n      coach:0,\n      industry:0,\n      recluter:0,\n      type:0,\n      zip:\"\",\n      latitud:0,\n      longitud:0\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n \n    },\n    getZipCodeInit: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({ zipCodeInit, isLoading: false });\n     \n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, \n    getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    }, getMapFilters: async (filter: FiltersMap) => {\n      setState({ isLoading: true });\n\n      if(filter.state!=\"\" ){\n\n  \n      const resultGeneric = await fetch(zipcodeFilters(filter));\n      const zipCode = await resultGeneric.json();\n      setState({ zipCode, isLoading: false });\n    }\n   \n      const data = { filter };\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        \n       \n       const  gpacMapObject = await rawResponse.json();\n \n      setState({gpacMapObject, isLoading: false });\n      })();\n\n    }, setViewPort:async(viewport: viewport) => {\n      setState({\n        viewport: viewport\n      })\n    }, SaveGpac:async (GuardaGpac: GuardaGpac) => {\n      const data = { GuardaGpac };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    }, getZipcode:async (state: any,FiltersMap: FiltersMap) => {\n\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray= await resultGeneric.json();\n    \n      const data = zipCodeArray.records.map((recorod: { fields: { geopoint: any; zip: any; }; }) => {\n\n        let rObj = {\n          coordi:recorod.fields.geopoint,\n          nombre:recorod.fields.zip,\n          value:recorod.fields.zip\n           \n        }\n        return rObj\n      });\n      \n      const zipState={value:state,options:data};\n      const filter=FiltersMap;\n      filter.state=state;\n        setState({zipState, isLoading: false,filter });\n        \n        console.log(filter);\n    }, setZIP:async(filter: FiltersMap,zip: any) => {\n      filter.zip=zip;\n      setState({  isLoading: false,filter }); \n    }, setName:async(filter: FiltersMap,zip: any) => {\n      filter.name=zip;\n      setState({  isLoading: false,filter }); \n    },setType:async(filter: FiltersMap,type: any) => {\n      filter.type=type;\n      setState({  isLoading: false,filter }); \n    },setSpecilty:async(filter: FiltersMap,specilty: any) => {\n      filter.specilty=specilty;\n      setState({  isLoading: false,filter }); \n    },setRecluter:async(filter: FiltersMap,zip: any) => {\n      filter.recluter=zip;\n      setState({  isLoading: false,filter }); \n    },setIndustry:async(filter: FiltersMap,zip: any) => {\n      filter.industry=zip;\n      setState({  isLoading: false,filter }); \n    },setFunctional:async(filter: FiltersMap,zip: any) => {\n      filter.functional=zip;\n      setState({  isLoading: false,filter }); \n    },setCoach:async(filter: FiltersMap,zip: any) => {\n      filter.coach=zip;\n      setState({  isLoading: false,filter }); \n    },setCandidate:async(filter: FiltersMap,zip: any) => {\n      filter.candidate=zip;\n      setState({  isLoading: false,filter }); \n    },setActivity:async(filter: FiltersMap,zip: any) => {\n      filter.activty=zip;\n      setState({  isLoading: false,filter }); \n    },setNameGuardar:async(name:string,Gpac:GuardaGpac) => {\n      const guardaGpac =Gpac;\n      guardaGpac.name=name;\n      setState({  isLoading: false,guardaGpac }); \n    }, getZipcodeGuarda:async (state: any,Gpac: GuardaGpac) => {\n\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray= await resultGeneric.json();\n    \n      const data = zipCodeArray.records.map((recorod: { fields: { geopoint: any; zip: any; }; }) => {\n\n        let rObj = {\n          coordi:recorod.fields.geopoint,\n          nombre:recorod.fields.zip,\n          value:recorod.fields.zip\n           \n        }\n        return rObj\n      });\n      \n      const zipState={value:state,options:data};\n      \n      Gpac.state=state;\n      const guardaGpac=Gpac;\n        setState({zipState, isLoading: false,guardaGpac });\n        \n   \n    },setInfoGuardar:async(zip:string,latitud:any,longitud:any,Gpac:GuardaGpac) => {\n      const guardaGpac =Gpac;\n      guardaGpac.zip=zip;\n      guardaGpac.latitud=latitud;\n      guardaGpac.longitud=longitud;\n      console.log(guardaGpac);\n      setState({  isLoading: false,guardaGpac }); \n    },setstateGuardar:async(name:any,Gpac:GuardaGpac) => {\n      const guardaGpac =Gpac;\n      guardaGpac.state=name;\n  \n      setState({  isLoading: false,guardaGpac }); \n    },setTypeSave:async(filter: GuardaGpac,type: any) => {\n      filter.type=type;\n      setState({  isLoading: false,filter }); \n    },setSpeciltySave:async(filter: GuardaGpac,specilty: any) => {\n      filter.specilty=specilty;\n      setState({  isLoading: false,filter }); \n    },setRecluterSave:async(filter: GuardaGpac,zip: any) => {\n      filter.recluter=zip;\n      setState({  isLoading: false,filter }); \n    },setIndustrySave:async(filter: GuardaGpac,zip: any) => {\n      filter.industry=zip;\n      setState({  isLoading: false,filter }); \n    },setFunctionalSave:async(filter: GuardaGpac,zip: any) => {\n      filter.functional=zip;\n      setState({  isLoading: false,filter }); \n    },setCoachSave:async(filter: GuardaGpac,zip: any) => {\n      filter.coach=zip;\n      setState({  isLoading: false,filter }); \n    },setCandidateSave:async(filter: GuardaGpac,zip: any) => {\n      filter.candidate=zip;\n      setState({  isLoading: false,filter }); \n    },setActivitySave:async(filter: GuardaGpac,zip: any) => {\n      filter.activty=zip;\n      setState({  isLoading: false,filter }); \n    }\n\n\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}