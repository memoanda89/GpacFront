{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=3000&facet=state&facet=timezone&facet=dst\";\n  return {\n    activity: undefined,\n    type: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n      console.log(zipCode);\n    }\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","zipCodeApi","activity","undefined","type","gpacMapObject","zipCode","records","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","console","log"],"mappings":"AAAA,OAAOA,MAAP,MAAuC,SAAvC;AAIA,eAAeA,MAAM,CAAC,CAACC,QAAD,EAA+BC,QAA/B,KAAwE;AAE1F,QAAMC,MAAM,GAAE,4BAAd;AACA,QAAMC,UAAU,GAAE,sJAAlB;AACA,SAAO;AAELC,IAAAA,QAAQ,EAACC,SAFJ;AAGLC,IAAAA,IAAI,EAACD,SAHA;AAILE,IAAAA,aAAa,EAAC,EAJT;AAKLC,IAAAA,OAAO,EAAC;AACNC,MAAAA,OAAO,EAAC;AADF,KALH;AAQVC,IAAAA,SAAS,EAAE,KARD;AASVC,IAAAA,WAAW,EAAE,YAAY;AACxBX,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACX,MAAM,GAAC,aAAR,CAA1B;AACA,YAAME,QAAQ,GAAG,MAAMQ,MAAM,CAACE,IAAP,EAAvB;AACAd,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,QAAF;AAAYM,QAAAA,SAAS,EAAE;AAAvB,OAAD,CAAR;AAED,KAfU;AAgBXK,IAAAA,OAAO,EAAE,YAAY;AACnBf,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACX,MAAM,GAAC,SAAR,CAA1B;AACA,YAAMI,IAAI,GAAG,MAAMM,MAAM,CAACE,IAAP,EAAnB;AACAd,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAF;AAAQI,QAAAA,SAAS,EAAE;AAAnB,OAAD,CAAR;AAED,KAtBU;AAsBTM,IAAAA,SAAS,EAAE,YAAY;AACvBhB,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACX,MAAM,GAAC,SAAR,CAA1B;AACA,YAAMK,aAAa,GAAG,MAAMK,MAAM,CAACE,IAAP,EAA5B;AACAd,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,aAAF;AAAiBG,QAAAA,SAAS,EAAE;AAA5B,OAAD,CAAR;AAED,KA5BU;AA6BXO,IAAAA,UAAU,EAAE,YAAY;AACtBjB,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACV,UAAD,CAA1B;AACA,YAAMK,OAAO,GAAG,MAAMI,MAAM,CAACE,IAAP,EAAtB;AACAd,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,OAAF;AAAWE,QAAAA,SAAS,EAAE;AAAtB,OAAD,CAAR;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AAED;AApCU,GAAP;AAuCC,CA3CgB,CAArB","sourcesContent":["import create,{GetState,SetState} from \"zustand\"\nimport { MyState } from \"./types\";\n\n\nexport default create((setState : SetState<MyState>, getState : GetState<MyState>):MyState => {\n\n    const server =\"http://localhost:8081/api/\";\n    const zipCodeApi =\"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=3000&facet=state&facet=timezone&facet=dst\";\n    return {\n\n      activity:undefined ,\n      type:undefined ,\n      gpacMapObject:[],\n      zipCode:{\n        records:[]\n      },\n isLoading: false,\n getActivity: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(server+\"getActivity\");\n  const activity = await result.json();\n  setState({ activity, isLoading: false });\n  \n},\ngetType: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(server+\"getType\");\n  const type = await result.json();\n  setState({ type, isLoading: false });\n  \n},getGapMap: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(server+\"getGpac\");\n  const gpacMapObject = await result.json();\n  setState({ gpacMapObject, isLoading: false });\n  \n},\ngetZipCode: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(zipCodeApi);\n  const zipCode = await result.json();\n  setState({ zipCode, isLoading: false });\n  console.log(zipCode);\n  \n},\n\n      }\n    })"]},"metadata":{},"sourceType":"module"}