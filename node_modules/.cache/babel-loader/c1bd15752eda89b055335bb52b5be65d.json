{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n  const zipcodeFilters = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state;\n    return api;\n  };\n\n  return {\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState: {\n      value: \"\",\n      options: []\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: []\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n    },\n    getZipCodeInit: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({\n        zipCodeInit,\n        isLoading: false\n      });\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    },\n    getMapFilters: async filter => {\n      setState({\n        isLoading: true\n      });\n      console.log(filter);\n\n      if (filter.state != \"\") {\n        const resultGeneric = await fetch(zipcodeFilters(filter));\n        const zipCode = await resultGeneric.json();\n        setState({\n          zipCode,\n          isLoading: false\n        });\n      }\n\n      const data = {\n        filter\n      };\n\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        const gpacMapObject = await rawResponse.json();\n        console.log(gpacMapObject);\n        setState({ ...gpacMapObject,\n          isLoading: false\n        });\n      })();\n    },\n    setViewPort: viewport => {\n      setState({\n        viewport: viewport\n      });\n    },\n    SaveGpac: GuardaGpac => {\n      const data = {\n        GuardaGpac\n      };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    },\n    getZipcode: state => {}\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","zipcodeFilters","value","api","state","viewport","latitude","longitude","width","height","zoom","zipState","options","searchMap","undefined","activity","getActivitySel","generic","type","specilty","functional","candidate","coach","recluiter","stated","gpacMapObject","zipCode","records","facet_groups","zipCodeInit","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","getZipCodeInit","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated","getMapFilters","filter","console","log","data","rawResponse","method","headers","body","JSON","stringify","setViewPort","SaveGpac","GuardaGpac","option","dataInfo","getZipcode"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState, FiltersMap, viewport,GuardaGpac } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n\n  const zipcodeFilters = (value: FiltersMap) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state\n    return api;\n  };\n  return {\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState:{\n      value:\"\",\n      options:[]\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n \n    },\n    getZipCodeInit: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({ zipCodeInit, isLoading: false });\n     \n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    }, getMapFilters: async (filter: FiltersMap) => {\n      setState({ isLoading: true });\n console.log(filter);\n      if(filter.state!=\"\" ){\n\n  \n      const resultGeneric = await fetch(zipcodeFilters(filter));\n      const zipCode = await resultGeneric.json();\n      setState({ zipCode, isLoading: false });\n    }\n   \n      const data = { filter };\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        \n       \n       const  gpacMapObject = await rawResponse.json();\n\n       console.log(gpacMapObject)\n      setState({ ...gpacMapObject, isLoading: false });\n      })();\n\n    }, setViewPort: (viewport: viewport) => {\n      setState({\n        viewport: viewport\n      })\n    }, SaveGpac: (GuardaGpac: GuardaGpac) => {\n      const data = { GuardaGpac };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    }, getZipcode: (state: string) => {\n      \n    }\n\n\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}