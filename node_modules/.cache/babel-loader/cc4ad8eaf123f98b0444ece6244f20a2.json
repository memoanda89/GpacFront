{"ast":null,"code":"import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\nvar useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nfunction create(createState) {\n  var state;\n  var listeners = new Set();\n\n  var setState = function setState(partial) {\n    var partialState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (partialState !== state) {\n      state = Object.assign({}, state, partialState);\n      listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var getSubscriber = function getSubscriber(listener) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getState;\n    var equalityFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.is;\n    return {\n      currentSlice: selector(state),\n      equalityFn: equalityFn,\n      errored: false,\n      listener: listener,\n      selector: selector,\n      unsubscribe: function unsubscribe() {}\n    };\n  };\n\n  var subscribe = function subscribe(subscriber) {\n    function listener() {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        var newStateSlice = subscriber.selector(state);\n\n        if (!subscriber.equalityFn(subscriber.currentSlice, newStateSlice)) {\n          subscriber.listener(subscriber.currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        subscriber.errored = true;\n        subscriber.listener(null, error);\n      }\n    }\n\n    listeners.add(listener);\n    return function () {\n      listeners.delete(listener);\n    };\n  };\n\n  var apiSubscribe = function apiSubscribe(listener, selector, equalityFn) {\n    return subscribe(getSubscriber(listener, selector, equalityFn));\n  };\n\n  var destroy = function destroy() {\n    return listeners.clear();\n  };\n\n  var useStore = function useStore() {\n    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getState;\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.is;\n    var forceUpdate = useReducer(function (c) {\n      return c + 1;\n    }, 0)[1];\n    var subscriberRef = useRef();\n\n    if (!subscriberRef.current) {\n      subscriberRef.current = getSubscriber(forceUpdate, selector, equalityFn);\n      subscriberRef.current.unsubscribe = subscribe(subscriberRef.current);\n    }\n\n    var subscriber = subscriberRef.current;\n    var newStateSlice;\n    var hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (subscriber.selector !== selector || subscriber.equalityFn !== equalityFn || subscriber.errored) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(subscriber.currentSlice, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(function () {\n      if (hasNewStateSlice) {\n        subscriber.currentSlice = newStateSlice;\n      }\n\n      subscriber.selector = selector;\n      subscriber.equalityFn = equalityFn;\n      subscriber.errored = false;\n    });\n    useIsoLayoutEffect(function () {\n      return subscriber.unsubscribe;\n    }, []);\n    return hasNewStateSlice ? newStateSlice : subscriber.currentSlice;\n  };\n\n  var api = {\n    setState: setState,\n    getState: getState,\n    subscribe: apiSubscribe,\n    destroy: destroy\n  };\n  state = createState(setState, getState, api);\n  return [useStore, api];\n}\n\nexport default create;\nexport { create };","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/GpacFront/node_modules/zustand/index.js"],"names":["useReducer","useRef","useEffect","useLayoutEffect","useIsoLayoutEffect","window","create","createState","state","listeners","Set","setState","partial","partialState","Object","assign","forEach","listener","getState","getSubscriber","selector","equalityFn","is","currentSlice","errored","unsubscribe","subscribe","subscriber","newStateSlice","error","add","delete","apiSubscribe","destroy","clear","useStore","forceUpdate","c","subscriberRef","current","hasNewStateSlice","api"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,SAA7B,EAAwCC,eAAxC,QAA+D,OAA/D;AAEA,IAAMC,kBAAkB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCH,SAAhC,GAA4CC,eAAvE;;AACA,SAASG,MAAT,CAAgBC,WAAhB,EAA6B;AAC3B,MAAIC,KAAJ;AACA,MAAIC,SAAS,GAAG,IAAIC,GAAJ,EAAhB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,OAAO,EAAI;AAC1B,QAAMC,YAAY,GAAG,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAACJ,KAAD,CAAvC,GAAiDI,OAAtE;;AAEA,QAAIC,YAAY,KAAKL,KAArB,EAA4B;AAC1BA,MAAAA,KAAK,GAAGM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyBK,YAAzB,CAAR;AACAJ,MAAAA,SAAS,CAACO,OAAV,CAAkB,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,EAAZ;AAAA,OAA1B;AACD;AACF,GAPD;;AASA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMV,KAAN;AAAA,GAAjB;;AAEA,MAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAACF,QAAD;AAAA,QAAWG,QAAX,uEAAsBF,QAAtB;AAAA,QAAgCG,UAAhC,uEAA6CP,MAAM,CAACQ,EAApD;AAAA,WAA4D;AAChFC,MAAAA,YAAY,EAAEH,QAAQ,CAACZ,KAAD,CAD0D;AAEhFa,MAAAA,UAAU,EAAVA,UAFgF;AAGhFG,MAAAA,OAAO,EAAE,KAHuE;AAIhFP,MAAAA,QAAQ,EAARA,QAJgF;AAKhFG,MAAAA,QAAQ,EAARA,QALgF;AAMhFK,MAAAA,WAAW,EAAE,uBAAM,CAAE;AAN2D,KAA5D;AAAA,GAAtB;;AASA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,UAAU,EAAI;AAC9B,aAASV,QAAT,GAAoB;AAClB;AACA;AACA;AACA,UAAI;AACF,YAAMW,aAAa,GAAGD,UAAU,CAACP,QAAX,CAAoBZ,KAApB,CAAtB;;AAEA,YAAI,CAACmB,UAAU,CAACN,UAAX,CAAsBM,UAAU,CAACJ,YAAjC,EAA+CK,aAA/C,CAAL,EAAoE;AAClED,UAAAA,UAAU,CAACV,QAAX,CAAoBU,UAAU,CAACJ,YAAX,GAA0BK,aAA9C;AACD;AACF,OAND,CAME,OAAOC,KAAP,EAAc;AACdF,QAAAA,UAAU,CAACH,OAAX,GAAqB,IAArB;AACAG,QAAAA,UAAU,CAACV,QAAX,CAAoB,IAApB,EAA0BY,KAA1B;AACD;AACF;;AAEDpB,IAAAA,SAAS,CAACqB,GAAV,CAAcb,QAAd;AACA,WAAO,YAAM;AACXR,MAAAA,SAAS,CAACsB,MAAV,CAAiBd,QAAjB;AACD,KAFD;AAGD,GArBD;;AAuBA,MAAMe,YAAY,GAAG,SAAfA,YAAe,CAACf,QAAD,EAAWG,QAAX,EAAqBC,UAArB;AAAA,WAAoCK,SAAS,CAACP,aAAa,CAACF,QAAD,EAAWG,QAAX,EAAqBC,UAArB,CAAd,CAA7C;AAAA,GAArB;;AAEA,MAAMY,OAAO,GAAG,SAAVA,OAAU;AAAA,WAAMxB,SAAS,CAACyB,KAAV,EAAN;AAAA,GAAhB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAiD;AAAA,QAAhDf,QAAgD,uEAArCF,QAAqC;AAAA,QAA3BG,UAA2B,uEAAdP,MAAM,CAACQ,EAAO;AAChE,QAAMc,WAAW,GAAGpC,UAAU,CAAC,UAAAqC,CAAC;AAAA,aAAIA,CAAC,GAAG,CAAR;AAAA,KAAF,EAAa,CAAb,CAAV,CAA0B,CAA1B,CAApB;AACA,QAAMC,aAAa,GAAGrC,MAAM,EAA5B;;AAEA,QAAI,CAACqC,aAAa,CAACC,OAAnB,EAA4B;AAC1BD,MAAAA,aAAa,CAACC,OAAd,GAAwBpB,aAAa,CAACiB,WAAD,EAAchB,QAAd,EAAwBC,UAAxB,CAArC;AACAiB,MAAAA,aAAa,CAACC,OAAd,CAAsBd,WAAtB,GAAoCC,SAAS,CAACY,aAAa,CAACC,OAAf,CAA7C;AACD;;AAED,QAAMZ,UAAU,GAAGW,aAAa,CAACC,OAAjC;AACA,QAAIX,aAAJ;AACA,QAAIY,gBAAgB,GAAG,KAAvB,CAXgE,CAWlC;AAC9B;AACA;;AAEA,QAAIb,UAAU,CAACP,QAAX,KAAwBA,QAAxB,IAAoCO,UAAU,CAACN,UAAX,KAA0BA,UAA9D,IAA4EM,UAAU,CAACH,OAA3F,EAAoG;AAClG;AACAI,MAAAA,aAAa,GAAGR,QAAQ,CAACZ,KAAD,CAAxB;AACAgC,MAAAA,gBAAgB,GAAG,CAACnB,UAAU,CAACM,UAAU,CAACJ,YAAZ,EAA0BK,aAA1B,CAA9B;AACD,KAnB+D,CAmB9D;;;AAGFxB,IAAAA,kBAAkB,CAAC,YAAM;AACvB,UAAIoC,gBAAJ,EAAsB;AACpBb,QAAAA,UAAU,CAACJ,YAAX,GAA0BK,aAA1B;AACD;;AAEDD,MAAAA,UAAU,CAACP,QAAX,GAAsBA,QAAtB;AACAO,MAAAA,UAAU,CAACN,UAAX,GAAwBA,UAAxB;AACAM,MAAAA,UAAU,CAACH,OAAX,GAAqB,KAArB;AACD,KARiB,CAAlB;AASApB,IAAAA,kBAAkB,CAAC;AAAA,aAAMuB,UAAU,CAACF,WAAjB;AAAA,KAAD,EAA+B,EAA/B,CAAlB;AACA,WAAOe,gBAAgB,GAAGZ,aAAH,GAAmBD,UAAU,CAACJ,YAArD;AACD,GAjCD;;AAmCA,MAAMkB,GAAG,GAAG;AACV9B,IAAAA,QAAQ,EAARA,QADU;AAEVO,IAAAA,QAAQ,EAARA,QAFU;AAGVQ,IAAAA,SAAS,EAAEM,YAHD;AAIVC,IAAAA,OAAO,EAAPA;AAJU,GAAZ;AAMAzB,EAAAA,KAAK,GAAGD,WAAW,CAACI,QAAD,EAAWO,QAAX,EAAqBuB,GAArB,CAAnB;AACA,SAAO,CAACN,QAAD,EAAWM,GAAX,CAAP;AACD;;AAED,eAAenC,MAAf;AACA,SAASA,MAAT","sourcesContent":["import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\n\nconst useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\nfunction create(createState) {\n  let state;\n  let listeners = new Set();\n\n  const setState = partial => {\n    const partialState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (partialState !== state) {\n      state = Object.assign({}, state, partialState);\n      listeners.forEach(listener => listener());\n    }\n  };\n\n  const getState = () => state;\n\n  const getSubscriber = (listener, selector = getState, equalityFn = Object.is) => ({\n    currentSlice: selector(state),\n    equalityFn,\n    errored: false,\n    listener,\n    selector,\n    unsubscribe: () => {}\n  });\n\n  const subscribe = subscriber => {\n    function listener() {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        const newStateSlice = subscriber.selector(state);\n\n        if (!subscriber.equalityFn(subscriber.currentSlice, newStateSlice)) {\n          subscriber.listener(subscriber.currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        subscriber.errored = true;\n        subscriber.listener(null, error);\n      }\n    }\n\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const apiSubscribe = (listener, selector, equalityFn) => subscribe(getSubscriber(listener, selector, equalityFn));\n\n  const destroy = () => listeners.clear();\n\n  const useStore = (selector = getState, equalityFn = Object.is) => {\n    const forceUpdate = useReducer(c => c + 1, 0)[1];\n    const subscriberRef = useRef();\n\n    if (!subscriberRef.current) {\n      subscriberRef.current = getSubscriber(forceUpdate, selector, equalityFn);\n      subscriberRef.current.unsubscribe = subscribe(subscriberRef.current);\n    }\n\n    const subscriber = subscriberRef.current;\n    let newStateSlice;\n    let hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (subscriber.selector !== selector || subscriber.equalityFn !== equalityFn || subscriber.errored) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(subscriber.currentSlice, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        subscriber.currentSlice = newStateSlice;\n      }\n\n      subscriber.selector = selector;\n      subscriber.equalityFn = equalityFn;\n      subscriber.errored = false;\n    });\n    useIsoLayoutEffect(() => subscriber.unsubscribe, []);\n    return hasNewStateSlice ? newStateSlice : subscriber.currentSlice;\n  };\n\n  const api = {\n    setState,\n    getState,\n    subscribe: apiSubscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return [useStore, api];\n}\n\nexport default create;\nexport { create };\n"]},"metadata":{},"sourceType":"module"}