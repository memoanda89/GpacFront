{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=30&facet=state&facet=timezone&facet=dst\";\n  return {\n    activity: undefined,\n    generic: undefined,\n    type: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n      console.log(zipCode);\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n      console.log(generic);\n    }\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","activity","undefined","generic","type","gpacMapObject","zipCode","records","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","console","log","getGeneric","catalogo","resultGeneric"],"mappings":"AAAA,OAAOA,MAAP,MAAuC,SAAvC;AAIA,eAAeA,MAAM,CAAC,CAACC,QAAD,EAA+BC,QAA/B,KAAwE;AAE5F,QAAMC,MAAM,GAAE,4BAAd;AACA,QAAMC,aAAa,GAAE,wCAArB;AAEE,QAAMC,UAAU,GAAE,oJAAlB;AACA,SAAO;AAELC,IAAAA,QAAQ,EAACC,SAFJ;AAGLC,IAAAA,OAAO,EAACD,SAHH;AAILE,IAAAA,IAAI,EAACF,SAJA;AAKLG,IAAAA,aAAa,EAAC,EALT;AAMLC,IAAAA,OAAO,EAAC;AACNC,MAAAA,OAAO,EAAC;AADF,KANH;AASVC,IAAAA,SAAS,EAAE,KATD;AAUVC,IAAAA,WAAW,EAAE,YAAY;AACxBb,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACb,MAAM,GAAC,aAAR,CAA1B;AACA,YAAMG,QAAQ,GAAG,MAAMS,MAAM,CAACE,IAAP,EAAvB;AACAhB,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,QAAF;AAAYO,QAAAA,SAAS,EAAE;AAAvB,OAAD,CAAR;AAED,KAhBU;AAiBXK,IAAAA,OAAO,EAAE,YAAY;AACnBjB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACb,MAAM,GAAC,SAAR,CAA1B;AACA,YAAMM,IAAI,GAAG,MAAMM,MAAM,CAACE,IAAP,EAAnB;AACAhB,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAF;AAAQI,QAAAA,SAAS,EAAE;AAAnB,OAAD,CAAR;AAED,KAvBU;AAuBTM,IAAAA,SAAS,EAAE,YAAY;AACvBlB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACb,MAAM,GAAC,SAAR,CAA1B;AACA,YAAMO,aAAa,GAAG,MAAMK,MAAM,CAACE,IAAP,EAA5B;AACAhB,MAAAA,QAAQ,CAAC;AAAES,QAAAA,aAAF;AAAiBG,QAAAA,SAAS,EAAE;AAA5B,OAAD,CAAR;AAED,KA7BU;AA8BXO,IAAAA,UAAU,EAAE,YAAY;AACtBnB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAME,MAAM,GAAG,MAAMC,KAAK,CAACX,UAAD,CAA1B;AACA,YAAMM,OAAO,GAAG,MAAMI,MAAM,CAACE,IAAP,EAAtB;AACAhB,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,OAAF;AAAWE,QAAAA,SAAS,EAAE;AAAtB,OAAD,CAAR;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AAED,KArCU;AAqCTY,IAAAA,UAAU,EAAE,MAAOC,QAAP,IAA2B;AACvCvB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAMY,aAAa,GAAG,MAAMT,KAAK,CAACZ,aAAa,GAACoB,QAAf,CAAjC;AACA,YAAMhB,OAAO,GAAG,MAAMiB,aAAa,CAACR,IAAd,EAAtB;AACAhB,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,OAAF;AAAWK,QAAAA,SAAS,EAAE;AAAtB,OAAD,CAAR;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AAED;AA5CU,GAAP;AA+CC,CArDgB,CAArB","sourcesContent":["import create,{GetState,SetState} from \"zustand\"\nimport { MyState } from \"./types\";\n\n\nexport default create((setState : SetState<MyState>, getState : GetState<MyState>):MyState => {\n\n  const server =\"http://localhost:8081/api/\";\n  const serverCatalog =\"http://localhost:8081/api/getCatalogo/\";\n    \n    const zipCodeApi =\"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=30&facet=state&facet=timezone&facet=dst\";\n    return {\n\n      activity:undefined , \n      generic:undefined ,\n      type:undefined ,\n      gpacMapObject:[],\n      zipCode:{\n        records:[]\n      },\n isLoading: false,\n getActivity: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(server+\"getActivity\");\n  const activity = await result.json();\n  setState({ activity, isLoading: false });\n  \n},\ngetType: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(server+\"getType\");\n  const type = await result.json();\n  setState({ type, isLoading: false });\n  \n},getGapMap: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(server+\"getGpac\");\n  const gpacMapObject = await result.json();\n  setState({ gpacMapObject, isLoading: false });\n  \n},\ngetZipCode: async () => {\n  setState({ isLoading: true });\n  const result = await fetch(zipCodeApi);\n  const zipCode = await result.json();\n  setState({ zipCode, isLoading: false });\n  console.log(zipCode);\n  \n},getGeneric: async (catalogo:string) => {\n  setState({ isLoading: true });\n  const resultGeneric = await fetch(serverCatalog+catalogo);\n  const generic = await resultGeneric.json();\n  setState({ generic, isLoading: false });\n  console.log(generic);\n  \n},\n\n      }\n    })"]},"metadata":{},"sourceType":"module"}