{"ast":null,"code":"import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\nconst useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nfunction create(createState) {\n  let state;\n  let listeners = new Set();\n\n  const setState = partial => {\n    const partialState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (partialState !== state) {\n      state = Object.assign({}, state, partialState);\n      listeners.forEach(listener => listener());\n    }\n  };\n\n  const getState = () => state;\n\n  const getSubscriber = (listener, selector = getState, equalityFn = Object.is) => ({\n    currentSlice: selector(state),\n    equalityFn,\n    errored: false,\n    listener,\n    selector,\n    unsubscribe: () => {}\n  });\n\n  const subscribe = subscriber => {\n    function listener() {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        const newStateSlice = subscriber.selector(state);\n\n        if (!subscriber.equalityFn(subscriber.currentSlice, newStateSlice)) {\n          subscriber.listener(subscriber.currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        subscriber.errored = true;\n        subscriber.listener(null, error);\n      }\n    }\n\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const apiSubscribe = (listener, selector, equalityFn) => subscribe(getSubscriber(listener, selector, equalityFn));\n\n  const destroy = () => listeners.clear();\n\n  const useStore = (selector = getState, equalityFn = Object.is) => {\n    const forceUpdate = useReducer(c => c + 1, 0)[1];\n    const subscriberRef = useRef();\n\n    if (!subscriberRef.current) {\n      subscriberRef.current = getSubscriber(forceUpdate, selector, equalityFn);\n      subscriberRef.current.unsubscribe = subscribe(subscriberRef.current);\n    }\n\n    const subscriber = subscriberRef.current;\n    let newStateSlice;\n    let hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (subscriber.selector !== selector || subscriber.equalityFn !== equalityFn || subscriber.errored) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(subscriber.currentSlice, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        subscriber.currentSlice = newStateSlice;\n      }\n\n      subscriber.selector = selector;\n      subscriber.equalityFn = equalityFn;\n      subscriber.errored = false;\n    });\n    useIsoLayoutEffect(() => subscriber.unsubscribe, []);\n    return hasNewStateSlice ? newStateSlice : subscriber.currentSlice;\n  };\n\n  const api = {\n    setState,\n    getState,\n    subscribe: apiSubscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return [useStore, api];\n}\n\nexport default create;\nexport { create };","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/GpacFront/node_modules/zustand/index.js"],"names":["useReducer","useRef","useEffect","useLayoutEffect","useIsoLayoutEffect","window","create","createState","state","listeners","Set","setState","partial","partialState","Object","assign","forEach","listener","getState","getSubscriber","selector","equalityFn","is","currentSlice","errored","unsubscribe","subscribe","subscriber","newStateSlice","error","add","delete","apiSubscribe","destroy","clear","useStore","forceUpdate","c","subscriberRef","current","hasNewStateSlice","api"],"mappings":"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","sourcesContent":["import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\n\nconst useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\nfunction create(createState) {\n  let state;\n  let listeners = new Set();\n\n  const setState = partial => {\n    const partialState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (partialState !== state) {\n      state = Object.assign({}, state, partialState);\n      listeners.forEach(listener => listener());\n    }\n  };\n\n  const getState = () => state;\n\n  const getSubscriber = (listener, selector = getState, equalityFn = Object.is) => ({\n    currentSlice: selector(state),\n    equalityFn,\n    errored: false,\n    listener,\n    selector,\n    unsubscribe: () => {}\n  });\n\n  const subscribe = subscriber => {\n    function listener() {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        const newStateSlice = subscriber.selector(state);\n\n        if (!subscriber.equalityFn(subscriber.currentSlice, newStateSlice)) {\n          subscriber.listener(subscriber.currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        subscriber.errored = true;\n        subscriber.listener(null, error);\n      }\n    }\n\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const apiSubscribe = (listener, selector, equalityFn) => subscribe(getSubscriber(listener, selector, equalityFn));\n\n  const destroy = () => listeners.clear();\n\n  const useStore = (selector = getState, equalityFn = Object.is) => {\n    const forceUpdate = useReducer(c => c + 1, 0)[1];\n    const subscriberRef = useRef();\n\n    if (!subscriberRef.current) {\n      subscriberRef.current = getSubscriber(forceUpdate, selector, equalityFn);\n      subscriberRef.current.unsubscribe = subscribe(subscriberRef.current);\n    }\n\n    const subscriber = subscriberRef.current;\n    let newStateSlice;\n    let hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (subscriber.selector !== selector || subscriber.equalityFn !== equalityFn || subscriber.errored) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(subscriber.currentSlice, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        subscriber.currentSlice = newStateSlice;\n      }\n\n      subscriber.selector = selector;\n      subscriber.equalityFn = equalityFn;\n      subscriber.errored = false;\n    });\n    useIsoLayoutEffect(() => subscriber.unsubscribe, []);\n    return hasNewStateSlice ? newStateSlice : subscriber.currentSlice;\n  };\n\n  const api = {\n    setState,\n    getState,\n    subscribe: apiSubscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return [useStore, api];\n}\n\nexport default create;\nexport { create };\n"]},"metadata":{},"sourceType":"module"}