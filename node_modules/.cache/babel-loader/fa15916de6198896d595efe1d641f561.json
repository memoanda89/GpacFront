{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=30&facet=state&facet=timezone&facet=dst\";\n  return {\n    activity: undefined,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","activity","undefined","generic","type","specilty","functional","candidate","coach","recluiter","stated","gpacMapObject","zipCode","records","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=30&facet=state&facet=timezone&facet=dst\";\n  return {\n\n    activity: undefined,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n\n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    },\n\n  }\n})"]},"metadata":{},"sourceType":"module"}