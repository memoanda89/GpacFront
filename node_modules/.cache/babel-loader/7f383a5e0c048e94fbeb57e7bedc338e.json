{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&facet=state\";\n  return {\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n      console.log(zipCode);\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    } // ,\n    // setActivity:(seleccionado:number)=>{\n    //   const searchMap.activity=number;\n    //  setState({searchMap.activity:seleccionado})\n    // }\n\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","searchMap","undefined","activity","getActivitySel","generic","type","specilty","functional","candidate","coach","recluiter","stated","gpacMapObject","zipCode","records","facet_groups","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","console","log","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&facet=state\";\n  return {\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel:0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups:[]\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n      console.log(zipCode);\n\n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    }\n    // ,\n    // setActivity:(seleccionado:number)=>{\n    //   const searchMap.activity=number;\n     \n    //  setState({searchMap.activity:seleccionado})\n     \n    // }\n\n  }\n})"]},"metadata":{},"sourceType":"module"}