{"ast":null,"code":"import create from \"zustand\";\nexport default create((setState, getState) => {\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n  const zipcodeFilters = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state;\n    return api;\n  };\n\n  const zipcodeFiltersString = value => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value;\n    return api;\n  };\n\n  return {\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState: {\n      value: \"\",\n      options: {\n        coordi: [],\n        nombre: \"\",\n        value: 0\n      }\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: []\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: []\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({\n        activity,\n        isLoading: false\n      });\n    },\n    getType: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({\n        type,\n        isLoading: false\n      });\n    },\n    getGapMap: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({\n        gpacMapObject,\n        isLoading: false\n      });\n    },\n    getZipCode: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({\n        zipCode,\n        isLoading: false\n      });\n    },\n    getZipCodeInit: async () => {\n      setState({\n        isLoading: true\n      });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({\n        zipCodeInit,\n        isLoading: false\n      });\n    },\n    getGeneric: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({\n        generic,\n        isLoading: false\n      });\n    },\n    getSpecilty: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({\n        specilty,\n        isLoading: false\n      });\n    },\n    getFunctional: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({\n        functional,\n        isLoading: false\n      });\n    },\n    getCandidate: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({\n        candidate,\n        isLoading: false\n      });\n    },\n    getCoach: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({\n        coach,\n        isLoading: false\n      });\n    },\n    getRecluter: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({\n        recluiter,\n        isLoading: false\n      });\n    },\n    getStated: async catalogo => {\n      setState({\n        isLoading: true\n      });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({\n        stated,\n        isLoading: false\n      });\n    },\n    getMapFilters: async filter => {\n      setState({\n        isLoading: true\n      });\n      console.log(filter);\n\n      if (filter.state != \"\") {\n        const resultGeneric = await fetch(zipcodeFilters(filter));\n        const zipCode = await resultGeneric.json();\n        setState({\n          zipCode,\n          isLoading: false\n        });\n      }\n\n      const data = {\n        filter\n      };\n\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        const gpacMapObject = await rawResponse.json();\n        console.log(gpacMapObject);\n        setState({ ...gpacMapObject,\n          isLoading: false\n        });\n      })();\n    },\n    setViewPort: async viewport => {\n      setState({\n        viewport: viewport\n      });\n    },\n    SaveGpac: async GuardaGpac => {\n      const data = {\n        GuardaGpac\n      };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    },\n    getZipcode: async state => {\n      console.log(state);\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray = await resultGeneric.json();\n      const data = zipCodeArray.records.map(recorod => {\n        let rObj = {\n          coodi: recorod.fields.geopoint,\n          nombre: recorod.fields.zip,\n          value: recorod.fields.zip\n        };\n        return rObj;\n      });\n      console.log(data);\n      const zipState = {\n        value: state,\n        options: data\n      }; // console.log(zipState)\n      // setState({zipState, isLoading: false });\n    }\n  };\n});","map":{"version":3,"sources":["/Users/memopro/Documents/source/react/gpac/src/zustand/index.tsx"],"names":["create","setState","getState","server","serverCatalog","zipCodeApi","zipcodeFilters","value","api","state","zipcodeFiltersString","viewport","latitude","longitude","width","height","zoom","zipState","options","coordi","nombre","searchMap","undefined","activity","getActivitySel","generic","type","specilty","functional","candidate","coach","recluiter","stated","gpacMapObject","zipCode","records","facet_groups","zipCodeInit","isLoading","getActivity","result","fetch","json","getType","getGapMap","getZipCode","getZipCodeInit","getGeneric","catalogo","resultGeneric","getSpecilty","getFunctional","getCandidate","getCoach","getRecluter","getStated","getMapFilters","filter","console","log","data","rawResponse","method","headers","body","JSON","stringify","setViewPort","SaveGpac","GuardaGpac","option","dataInfo","getZipcode","zipCodeArray","map","recorod","rObj","coodi","fields","geopoint","zip"],"mappings":"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","sourcesContent":["import create, { GetState, SetState } from \"zustand\"\nimport { MyState, FiltersMap, viewport,GuardaGpac } from \"./types\";\n\n\nexport default create((setState: SetState<MyState>, getState: GetState<MyState>): MyState => {\n\n  const server = \"http://localhost:8081/api/\";\n  const serverCatalog = \"http://localhost:8081/api/getCatalogo/\";\n\n  const zipCodeApi = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&rows=300&facet=state\";\n\n\n  const zipcodeFilters = (value: FiltersMap) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value.state\n    return api;\n  };\n  const zipcodeFiltersString = (value: string) => {\n    const api = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=us-zip-code-latitude-and-longitude&q=&refine.state=\" + value\n    return api;\n  };\n  return {\n    viewport: {\n      latitude: 40.5360,\n      longitude: -94.7522,\n      width: 1030,\n      height: 900,\n      zoom: 2\n    },\n    zipState:{\n      value:\"\",\n      options:{\n        coordi:[],\n        nombre:\"\",\n        value:0\n      }\n    },\n    searchMap: undefined,\n    activity: undefined,\n    getActivitySel: 0,\n    generic: undefined,\n    type: undefined,\n    specilty: undefined,\n    functional: undefined,\n    candidate: undefined,\n    coach: undefined,\n    recluiter: undefined,\n    stated: undefined,\n    gpacMapObject: [],\n    zipCode: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    zipCodeInit: {\n      records: [],\n      facet_groups: [\n\n      ]\n    },\n    isLoading: false,\n    getActivity: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getActivity\");\n      const activity = await result.json();\n      setState({ activity, isLoading: false });\n\n    },\n    getType: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getType\");\n      const type = await result.json();\n      setState({ type, isLoading: false });\n\n    }, getGapMap: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(server + \"getGpac\");\n      const gpacMapObject = await result.json();\n      setState({ gpacMapObject, isLoading: false });\n\n    },\n    getZipCode: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCode = await result.json();\n      setState({ zipCode, isLoading: false });\n \n    },\n    getZipCodeInit: async () => {\n      setState({ isLoading: true });\n      const result = await fetch(zipCodeApi);\n      const zipCodeInit = await result.json();\n      setState({ zipCodeInit, isLoading: false });\n     \n\n    }, getGeneric: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const generic = await resultGeneric.json();\n      setState({ generic, isLoading: false });\n\n\n    }, getSpecilty: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const specilty = await resultGeneric.json();\n      setState({ specilty, isLoading: false });\n\n\n    }, getFunctional: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const functional = await resultGeneric.json();\n      setState({ functional, isLoading: false });\n\n\n    }, getCandidate: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const candidate = await resultGeneric.json();\n      setState({ candidate, isLoading: false });\n\n\n    }, getCoach: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const coach = await resultGeneric.json();\n      setState({ coach, isLoading: false });\n\n\n    }, getRecluter: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const recluiter = await resultGeneric.json();\n      setState({ recluiter, isLoading: false });\n\n\n    }, getStated: async (catalogo: string) => {\n      setState({ isLoading: true });\n      const resultGeneric = await fetch(serverCatalog + catalogo);\n      const stated = await resultGeneric.json();\n      setState({ stated, isLoading: false });\n\n\n    }, getMapFilters: async (filter: FiltersMap) => {\n      setState({ isLoading: true });\n console.log(filter);\n      if(filter.state!=\"\" ){\n\n  \n      const resultGeneric = await fetch(zipcodeFilters(filter));\n      const zipCode = await resultGeneric.json();\n      setState({ zipCode, isLoading: false });\n    }\n   \n      const data = { filter };\n      (async () => {\n        const rawResponse = await fetch(server + \"filtros\", {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        \n       \n       const  gpacMapObject = await rawResponse.json();\n\n       console.log(gpacMapObject)\n      setState({ ...gpacMapObject, isLoading: false });\n      })();\n\n    }, setViewPort:async(viewport: viewport) => {\n      setState({\n        viewport: viewport\n      })\n    }, SaveGpac:async (GuardaGpac: GuardaGpac) => {\n      const data = { GuardaGpac };\n      const option = {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      };\n\n      var dataInfo = fetch(server + \"GuardaGpac\", option);\n    }, getZipcode:async (state: any) => {\nconsole.log(state)\n      const resultGeneric = await fetch(zipcodeFiltersString(state));\n      const zipCodeArray= await resultGeneric.json();\n    \n      const data = zipCodeArray.records.map((recorod: { fields: { geopoint: any; zip: any; }; }) => {\n\n        let rObj = {\n          coodi:recorod.fields.geopoint,\n          nombre:recorod.fields.zip,\n          value:recorod.fields.zip\n           \n        }\n        return rObj\n      });\n      \n      console.log(data)\n    const zipState ={ value:state,options:data}\n      \n    \n      // console.log(zipState)\n      // setState({zipState, isLoading: false });\n    }\n\n\n  }\n})\n\n"]},"metadata":{},"sourceType":"module"}